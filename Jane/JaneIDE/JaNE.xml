<?xml version="1.0" encoding="utf-8"?>

<ScintillaNET>
    <Language Name="jane">
        <Lexer LexerName="cpp"/>
        <Lexer LineCommentPrefix="//" StreamCommentPrefix="/*" StreamCommentSuffix="*/" >
            <Keywords List="0">class static import new interface null return final for while do break continue super if else </Keywords>
            <Keywords List="1">void int string String byte boolean float</Keywords>
            <Properties>
        		<Property Name="fold.comment" Value="1" />
      		</Properties>
        </Lexer>
        <Styles>
        	<Style Name="DEFAULT" FontName="Consolas" Size="10" Bold="Yes"/>
            <Style Name="NUMBER" ForeColor="#590CE8" />
            <Style Name="COMMENT" ForeColor="Green"/>
            <Style Name="STRING" ForeColor="#943E14" />
            <Style Name="WORD" ForeColor="#AB2778" />
            <Style Name="WORD2" ForeColor="#019966" Italic="Yes"/>
            <Style Name="WORD5" ForeColor="#FF0000" Italic="Yes"/>
            <Style Name="OPERATOR" ForeColor="#000000" Bold="Yes"/>
        </Styles>

        <AutoComplete FillUpCharacters="" SingleLineAccept="True" IsCaseSensitive="False">
        <List>
          boolean class static import new interface return final float break continue super void int string byte Char.parseInt() Math.abs() Math.abs() Math.acos() Math.asin() Math.atan() Math.cbrt() Math.ceil() Math.cos() Math.cosh() Math.floor() Math.ln() Math.log10() Math.max() Math.max() Math.min() Math.min() Math.pow() Math.sin() Math.sinh() Math.sqrt() Math.tan() Math.tanh() Math.toDegrees() Math.toRadians()  String.charAt() String.compareTo() String.compareToIgnoreCase() String.concat() String.copyValueOf() String.endsWith() String.indexOfChar() String.indexOfCharFromIndex() String.indexOfString() String.indexOfStringFromIndex() String.lastIndexOfChar() String.lastIndexOfCharFromIndex() String.lastIndexOfString() String.lastIndexOfStringFromIndex() String.length() String.parseInt() String.parseFloat() String.startsWith() String.substringFromIndex() String.substringFromInterval() String.toCharArray() String.toLowerCase() String.toUpperCase() String.trim() String.valueOfInt() String.valueOfChar() String.valueOfFloat() String.valueOfBoolean()   Console.writeLine()  Array.length() Array.create()
        </List>
        </AutoComplete>	

        <Indentation TabWidth="4" UseTabs="true"/>

      <Snippets IsOneKeySelectionEmbedEnabled="True" IsEnabled="true">
        <Snippet Shortcut="If" IsSurroundsWith="true">if ($true$)
{
  $selected$$end$
}
        </Snippet>
        <Snippet Shortcut="IfElse" IsSurroundsWith="true">
if ($true$)
{
  $selected$$end$
}
else
{
  
}
        </Snippet>
        <Snippet Shortcut="For" IsSurroundsWith="true">for (int $i$ = $0$; $i$ &lt; $max$; $i$++)
{
  $selected$$end$
}
        </Snippet>
        <Snippet Shortcut="While" IsSurroundsWith="true">while($true$)
{
  $selected$$end$
}
        </Snippet>

        <Snippet Shortcut="YAS" IsSurroundsWith="true">YetAnotherSnippet($end$);</Snippet>

      <Snippet Shortcut="MainClass" IsSurroundsWith="true">class $main$
{
  static void main()
    {
      $end$
    }
}
      </Snippet>

<Snippet Shortcut="NewClass" IsSurroundsWith="true">class $NewClass$
{
  void $NewClass$()
  {
    $end$
  }
}
        </Snippet>
      </Snippets>
      
    </Language>

</ScintillaNET>